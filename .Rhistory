Date_year = year(Date_reported),
Date_month = month(Date_reported),
Date_day = day(Date_reported)) %>%
select(-Country_code, -Date_reported)
# Summary statistics
summary(cases_cleaned)
View(cases_cleaned)
# Aggregated data for plotting
weekly_summary <- cases_cleaned %>%
group_by(Date_year, Date_month) %>%
summarise(Total_New_Cases = sum(New_cases), Total_New_Deaths = sum(New_deaths))
# Load libraries
library(dplyr)
library(caret)
library(readr)
library(yardstick)
library(pROC)
library(corrplot)
library(Hmisc)  # P-value correlation
library(boot)
library(zoo)
library(ggplot2)
library(lubridate)
library(xgboost)
library(glmnet)  # Lasso and Ridge regression
library(nnet)    # Neural Network
# --------------------- Data Loading & Exploration ---------------------
# Load datasets
cases <- read_csv("WHO COVID-19 cases.csv", show_col_types = FALSE)
countries <- read_csv("countries.csv", show_col_types = FALSE)
# Basic data exploration
str(cases)        # View the structure of the dataset
dim(cases)        # Get the dimensions of the dataset
summary(cases)    # Summary statistics
# Check for missing values in each column
missing_values <- colSums(is.na(cases))
print(missing_values)
# Remove rows with missing Country_code or WHO_region
cases <- cases %>%
filter(!is.na(Country_code) & !is.na(WHO_region))
# --------------------- Data Cleaning & Transformation ---------------------
# Interpolation for New_cases and New_deaths
cases <- cases %>%
arrange(Country_code, Date_reported) %>%
group_by(Country_code) %>%
mutate(New_cases = na.approx(New_cases, na.rm = FALSE),
New_deaths = na.approx(New_deaths, na.rm = FALSE)) %>%
ungroup() %>%
mutate(New_cases = ifelse(is.na(New_cases), 0, New_cases),
New_deaths = ifelse(is.na(New_deaths), 0, New_deaths))
# Recheck for missing values after cleaning
missing_values_after <- colSums(is.na(cases))
print(missing_values_after)
# Merge the 'cases' dataset with 'countries' for geographical coordinates
cases_with_coords <- cases %>%
left_join(countries, by = c("Country_code" = "country")) %>%
na.omit()
# Summary statistics after merge
summary(cases_with_coords)
# Create new date-based features
cases_cleaned <- cases_with_coords %>%
mutate(Date_reported = as.Date(Date_reported),
Date_year = year(Date_reported),
Date_month = month(Date_reported),
Date_day = day(Date_reported)) %>%
select(-Country_code, -Date_reported)  # Remove unnecessary columns
# --------------------- Data Preparation for Modeling ---------------------
# Remove columns with too many categories (e.g., 'name' and 'WHO_region')
cases_1 <- cases_cleaned %>% select(-c(name, WHO_region))
# Correlation matrix for numeric columns
case_1Numeric <- cases_1 %>% select(where(is.numeric))
cases_1Corr <- cor(case_1Numeric)
print(cases_1Corr)
# Correlation matrix with p-values
rcorr_matrix_pvalue <- rcorr(as.matrix(case_1Numeric))
print(rcorr_matrix_pvalue)
# Plot the correlation matrix
corrplot(cases_1Corr)
# Final cleaned dataset
cases_cleaned <- cases_1 %>%
select(-Country)  # Remove 'Country' column
# --------------------- Feature Encoding & Scaling ---------------------
# One-Hot Encoding
dummies <- dummyVars(~ ., data = cases_cleaned)
cases_cleaned <- predict(dummies, newdata = cases_cleaned)
cases_cleaned <- as.data.frame(cases_cleaned)
# Prepare the feature matrix (X) and target variable (y)
x <- cases_cleaned %>% select(-Cumulative_deaths)  # Features
y <- cases_cleaned$Cumulative_deaths  # Target
# Ensure that X is numeric
x_numeric <- x %>% select(where(is.numeric))
x_scaled <- as.data.frame(scale(x_numeric))
# Scale the target variable
y_scaled <- scale(y)
# Split the dataset into training and testing sets
set.seed(42)  # For reproducibility
train_index <- createDataPartition(y_scaled, p = 0.8, list = FALSE)
x_train <- x_scaled[train_index, ]
x_test <- x_scaled[-train_index, ]
y_train <- y_scaled[train_index]
y_test <- y_scaled[-train_index]
# --------------------- Model Training & Evaluation ---------------------
# Cross-validation setup
train_control <- trainControl(method = "cv", number = 5)
# --- Linear Regression ---
model_lm <- train(x_train, y_train, method = "lm", trControl = train_control)
predictions_lm <- predict(model_lm, newdata = x_test)
mse_lm <- mean((predictions_lm - y_test) ^ 2)
r_squared_lm <- 1 - sum((predictions_lm - y_test) ^ 2) / sum((y_test - mean(y_test)) ^ 2)
# --- Ridge Regression ---
grid_ridge <- expand.grid(alpha = 0, lambda = seq(0, 10, by = 0.1))
model_ridge <- train(x_train, y_train, method = "glmnet", trControl = train_control, tuneGrid = grid_ridge)
predictions_ridge <- predict(model_ridge, newdata = x_test)
mse_ridge <- mean((predictions_ridge - y_test) ^ 2)
r_squared_ridge <- 1 - mse_ridge / var(y_test)
# --- XGBoost Model ---
x_train_matrix <- as.matrix(x_train)
y_train_matrix <- as.matrix(y_train)
x_test_matrix <- as.matrix(x_test)
y_test_matrix <- as.matrix(y_test)
# Train the XGBoost model
xgb_model <- xgboost(
data = x_train_matrix,
label = y_train_matrix,
nrounds = 500,                 # Increased number of boosting rounds
max_depth = 3,                 # Shallower trees to prevent overfitting
eta = 0.01,                    # Lower learning rate
subsample = 0.8,               # Subsample the data to reduce overfitting
colsample_bytree = 0.8,        # Subsample columns for each tree
min_child_weight = 9,          # Avoid overly specific splits
lambda = 1,                    # L2 regularization (Ridge)
alpha = 0.1,                   # L1 regularization (Lasso)
objective = "reg:squarederror", # Objective for regression
eval_metric = "rmse",          # Metric to track during training
early_stopping_rounds = 10,    # Stop if no improvement after 10 rounds
verbose = 0                    # Silence output during training
)
# Predictions and RMSE calculation
preds <- predict(xgb_model, x_test_matrix)
rmse <- sqrt(mean((preds - y_test_matrix)^2))
print(paste("RMSE:", rmse))
# --------------------- Results & Comparison ---------------------
# Create a results summary table
results <- data.frame(
Model = c("Linear Regression", "Ridge Regression", "XGBoost"),
Train_MSE = c(mean((predict(model_lm, newdata = x_train) - y_train) ^ 2),
mean((predict(model_ridge, newdata = x_train) - y_train) ^ 2),
mean((predict(xgb_model, newdata = x_train_matrix) - y_train_matrix) ^ 2)),
Test_MSE = c(mse_lm, mse_ridge, mean((preds - y_test_matrix)^2)),
Train_R2 = c(r_squared_lm, r_squared_ridge, 1 - mean((predict(xgb_model, newdata = x_train_matrix) - y_train_matrix)^2) / var(y_train_matrix)),
Test_R2 = c(1 - mse_lm / var(y_test),
1 - mse_ridge / var(y_test),
1 - mean((preds - y_test_matrix)^2) / var(y_test_matrix))
)
# Print the results
cat("Results Summary:\n")
print(results)
# Evaluate overfitting by comparing train and test performance
train_results <- data.frame(
Model = c("Linear Regression", "Ridge Regression", "XGBoost"),
Train_MSE = c(mean((predict(model_lm, newdata = x_train) - y_train) ^ 2),
mean((predict(model_ridge, newdata = x_train) - y_train) ^ 2),
mean((predict(xgb_model, newdata = x_train_matrix) - y_train_matrix) ^ 2)),
Test_MSE = c(mse_lm, mse_ridge, mean((preds - y_test_matrix)^2))
)
# Print the train results to evaluate overfitting
print(train_results)
View(cases_cleaned)
View(cases_cleaned)
View(cases_with_coords)
View(cases_with_coords)
# Load libraries
library(flexdashboard)
library(dplyr)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(knitr)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
library(highcharter)
library(readr)
library(leaflet)
# Load datasets
cases <- read_csv("WHO COVID-19 cases.csv", show_col_types = FALSE)
countries <- read_csv("countries.csv", show_col_types = FALSE)
# Basic data exploration
summary(cases)    # Summary statistics
# Check for missing values in each column
missing_values <- colSums(is.na(cases))
# Remove rows with missing Country_code or WHO_region
cases <- cases %>%
filter(!is.na(Country_code) & !is.na(WHO_region))
# --------------------- Data Cleaning & Transformation ---------------------
# Interpolation for New_cases and New_deaths
cases <- cases %>%
arrange(Country_code, Date_reported) %>%
group_by(Country_code) %>%
mutate(New_cases = na.approx(New_cases, na.rm = FALSE),
New_deaths = na.approx(New_deaths, na.rm = FALSE)) %>%
ungroup() %>%
mutate(New_cases = ifelse(is.na(New_cases), 0, New_cases),
New_deaths = ifelse(is.na(New_deaths), 0, New_deaths))
# Merge the 'cases' dataset with 'countries' for geographical coordinates
cases_with_coords <- cases %>%
left_join(countries, by = c("Country_code" = "country")) %>%
na.omit()
# Creazione di una palette di colori per i grafici
mycolors <- c("blue", "#FFC125", "darkgreen", "darkorange")
valueBox(length(cases_with_coords$data_reporting), icon = "fa-database", color = "info")
valueBox(length(cases_with_coords), icon = "fa-database", color = "info")
# Install necessary packages
# These libraries are required for data manipulation, modeling, and visualization
install.packages(c("dplyr", "caret", "readr", "yardstick", "pROC", "boot", "zoo",
"ggplot2", "lubridate", "glmnet", "nnet", "xgboost", "corrplot", "Hmisc"))
# Load libraries
library(dplyr)
library(caret)
library(readr)
library(yardstick)
library(pROC)
library(corrplot)
library(Hmisc)  # P-value correlation
library(boot)
library(zoo)
library(ggplot2)
library(lubridate)
library(xgboost)
library(glmnet)  # Lasso and Ridge regression
library(nnet)    # Neural Network
# Load datasets
cases <- read_csv("WHO COVID-19 cases.csv", show_col_types = FALSE)
countries <- read_csv("countries.csv", show_col_types = FALSE)
View(cases)
View(countries)
# Basic data exploration
str(cases)        # View the structure of the dataset
dim(cases)        # Get the dimensions of the dataset
summary(cases)    # Summary statistics
# Check for missing values in each column
missing_values <- colSums(is.na(cases))
print(missing_values)
# Remove rows with missing Country_code or WHO_region
cases <- cases %>%
filter(!is.na(Country_code) & !is.na(WHO_region))
# Interpolation for New_cases and New_deaths
cases <- cases %>%
arrange(Country_code, Date_reported) %>%
group_by(Country_code) %>%
mutate(New_cases = na.approx(New_cases, na.rm = FALSE),
New_deaths = na.approx(New_deaths, na.rm = FALSE)) %>%
ungroup() %>%
mutate(New_cases = ifelse(is.na(New_cases), 0, New_cases),
New_deaths = ifelse(is.na(New_deaths), 0, New_deaths))
# Recheck for missing values after cleaning
missing_values_after <- colSums(is.na(cases))
print(missing_values_after)
# Merge the 'cases' dataset with 'countries' for geographical coordinates
cases_with_coords <- cases %>%
left_join(countries, by = c("Country_code" = "country")) %>%
na.omit()
View(cases_with_coords)
# Summary statistics after merge
summary(cases_with_coords)
# Create new date-based features
cases_cleaned <- cases_with_coords %>%
mutate(Date_reported = as.Date(Date_reported),
Date_year = year(Date_reported),
Date_month = month(Date_reported),
Date_day = day(Date_reported)) %>%
select(-Country_code, -Date_reported)  # Remove unnecessary columns
# Remove columns with too many categories (e.g., 'name' and 'WHO_region')
cases_1 <- cases_cleaned %>% select(-c(name, WHO_region))
View(cases_1)
# Correlation matrix for numeric columns
case_1Numeric <- cases_1 %>% select(where(is.numeric))
cases_1Corr <- cor(case_1Numeric)
print(cases_1Corr)
# Correlation matrix with p-values
rcorr_matrix_pvalue <- rcorr(as.matrix(case_1Numeric))
print(rcorr_matrix_pvalue)
# Plot the correlation matrix
corrplot(cases_1Corr)
# Final cleaned dataset
cases_cleaned <- cases_1 %>%
select(-Country)  # Remove 'Country' column
View(cases_cleaned)
View(cases_1)
View(cases_1)
# Line chart
ggplot(cases_1, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line() +
labs(title = "New COVID-19 Cases Over Time", x = "Date", y = "New Cases")
# Chart 1
p1 <- ggplot(cases_1, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line() +
labs(title = "New COVID-19 Cases Over Time", x = "Date", y = "New Cases")
library(scales)   # per migliorare i formati di scala
library(ggthemes) # per temi più moderni
# Chart 1
p1 <- ggplot(cases_1, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +      # Linea più spessa e colorata
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1, linetype = "dashed") +  # Aggiungi linea di tendenza smussata
labs(title = "New COVID-19 Cases Over Time",
subtitle = "A trend analysis of daily cases",
x = "Date", y = "New Cases",
caption = "Source: WHO COVID-19 Data") +    # Aggiungi titolo, sottotitolo e caption
theme_minimal() +                                # Usa un tema moderno e minimalista
theme(plot.title = element_text(face = "bold", size = 16, color = "darkblue"),  # Personalizza il titolo
plot.subtitle = element_text(size = 12, color = "darkgrey"),              # Personalizza il sottotitolo
axis.title.x = element_text(face = "bold", color = "darkblue"),
axis.title.y = element_text(face = "bold", color = "darkblue"),
axis.text = element_text(color = "grey40")) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
scale_y_continuous(labels = comma)  # Format numerico con virgola
p1
# Chart 1
p1 <- ggplot(data, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +      # Linea più spessa e colorata
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1, linetype = "dashed") +  # Aggiungi linea di tendenza smussata
labs(title = "New COVID-19 Cases Over Time",
subtitle = "A trend analysis of daily cases",
x = "Date", y = "New Cases",
caption = "Source: WHO COVID-19 Data") +    # Aggiungi titolo, sottotitolo e caption
theme_minimal() +                                # Usa un tema moderno e minimalista
theme(plot.title = element_text(face = "bold", size = 16, color = "darkblue"),  # Personalizza il titolo
plot.subtitle = element_text(size = 12, color = "darkgrey"),              # Personalizza il sottotitolo
axis.title.x = element_text(face = "bold", color = "darkblue"),
axis.title.y = element_text(face = "bold", color = "darkblue"),
axis.text = element_text(color = "grey40"),
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Ruota le etichette dell'asse x
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
scale_y_continuous(labels = comma)  # Format numerico con virgola
p1
library(plotly)
# Chart 1
p <- ggplot(data, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +      # Linea più spessa e colorata
labs(title = "New COVID-19 Cases Over Time",
x = "Date", y = "New Cases") +    # Aggiungi titolo e asse
theme_minimal() +                      # Usa un tema moderno e minimalista
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
theme(axis.text.x = element_text(angle = 45, hjust = 1))         # Ruota le etichette dell'asse x
# Trasforma il grafico in interattivo con plotly
p_interactive <- ggplotly(p)
# Chart 1
p <- ggplot(data, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +      # Linea più spessa e colorata
labs(title = "New COVID-19 Cases Over Time",
x = "Date", y = "New Cases") +    # Aggiungi titolo e asse
theme_minimal() +                      # Usa un tema moderno e minimalista
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
theme(axis.text.x = element_text(angle = 45, hjust = 1))         # Ruota le etichette dell'asse x
# Chart 1
p <- ggplot(cases_1, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +      # Linea più spessa e colorata
labs(title = "New COVID-19 Cases Over Time",
x = "Date", y = "New Cases") +    # Aggiungi titolo e asse
theme_minimal() +                      # Usa un tema moderno e minimalista
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
theme(axis.text.x = element_text(angle = 45, hjust = 1))         # Ruota le etichette dell'asse x
# Trasforma il grafico in interattivo con plotly
p_interactive <- ggplotly(p)
# Mostra il grafico interattivo
p_interactive
# Chart 1
p <- ggplot(data, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +       # Linea principale
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1, linetype = "dashed") +  # Linea di tendenza smussata
labs(title = "New COVID-19 Cases Over Time",
x = "Date", y = "New Cases") +    # Aggiungi titolo e asse
theme_minimal() +                      # Usa un tema moderno e minimalista
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
scale_y_continuous(labels = scales::comma) +  # Evita la notazione esponenziale sull'asse Y
theme(axis.text.x = element_text(angle = 45, hjust = 1))         # Ruota le etichette dell'asse x
# Trasforma il grafico in interattivo con plotly
p_interactive <- ggplotly(p)
# Mostra il grafico interattivo
p_interactive
# Chart 1
p <- ggplot(cases_1, aes(x = as.Date(paste(Date_year, Date_month, Date_day, sep = "-")), y = New_cases)) +
geom_line(color = "steelblue", size = 1.2) +       # Linea principale
geom_smooth(method = "loess", se = FALSE, color = "red", size = 1, linetype = "dashed") +  # Linea di tendenza smussata
labs(title = "New COVID-19 Cases Over Time",
x = "Date", y = "New Cases") +    # Aggiungi titolo e asse
theme_minimal() +                      # Usa un tema moderno e minimalista
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +  # Etichette per date più leggibili
scale_y_continuous(labels = scales::comma) +  # Evita la notazione esponenziale sull'asse Y
theme(axis.text.x = element_text(angle = 45, hjust = 1))         # Ruota le etichette dell'asse x
# Trasforma il grafico in interattivo con plotly
p_interactive <- ggplotly(p)
# Mostra il grafico interattivo
p_interactive
# Chart 2
library(maps)
world <- map_data("world")
ggplot() +
geom_point(data = data, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +
# Chart 2
library(maps)
# Chart 2
library(maps)
world <- map_data("world")
ggplot() +
geom_point(data = cases_1, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +
p2 <- ggplot() +
geom_point(data = cases_1, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +
p2
p2
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +
geom_point(data = cases_1, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +
labs(title = "New COVID-19 Cases by Location")
world <- map_data("world")
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +
geom_point(data = cases_1, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +
labs(title = "New COVID-19 Cases by Location")
p2
world <- map_data("world")
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +
geom_point(data = cases_1, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +
scale_y_continuous(labels = scales::comma) +
labs(title = "New COVID-19 Cases by Location")
p2
world <- map_data("world")
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +  # Mappa del mondo
geom_point(data = cases_1, aes(x = longitude, y = latitude, size = New_cases), color = "red", alpha = 0.7) +  # Punti per i casi COVID-19
scale_size_continuous(range = c(1, 10), breaks = c(100, 1000, 10000, 50000), labels = comma) +  # Regola le dimensioni dei punti
scale_y_continuous(labels = comma) +  # Asse Y senza notazione esponenziale
labs(title = "New COVID-19 Cases by Location",
size = "New Cases",
x = "Longitude", y = "Latitude") +  # Etichette degli assi
theme_minimal() +  # Tema pulito e minimale
theme(plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
p2
world <- map_data("world")
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +  # Mappa del mondo
geom_point(data = cases_1, aes(x = longitude, y = latitude, color = New_cases, size = New_cases), alpha = 0.7) +  # Punti per i casi COVID-19 con colore e dimensione basati su New_cases
scale_color_gradient(low = "yellow", high = "red", name = "New Cases") +  # Scala colori dal giallo al rosso
scale_size_continuous(range = c(1, 10), labels = comma) +  # Regola le dimensioni dei punti
scale_y_continuous(labels = comma) +  # Asse Y senza notazione esponenziale
labs(title = "New COVID-19 Cases by Location",
x = "Longitude", y = "Latitude") +  # Etichette degli assi
theme_minimal() +  # Tema pulito e minimale
theme(plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
p2
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +  # Mappa del mondo
geom_point(data = cases_1, aes(x = longitude, y = latitude, color = New_cases, size = New_cases), alpha = 0.7) +  # Punti per i casi COVID-19 con colore e dimensione basati su New_cases
scale_color_gradient(low = "yellow", high = "red", name = "New Cases", labels = scales::comma) +  # Scala colori dal giallo al rosso con numeri normali
scale_size_continuous(range = c(1, 10), guide = "none") +  # Regola le dimensioni dei punti e rimuovi la legenda
scale_y_continuous(labels = comma) +  # Asse Y senza notazione esponenziale
labs(title = "New COVID-19 Cases by Location",
x = "Longitude", y = "Latitude") +  # Etichette degli assi
theme_minimal() +  # Tema pulito e minimale
theme(plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
world <- map_data("world")
p2 <- ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = "lightblue", color = "white") +  # Mappa del mondo
geom_point(data = cases_1, aes(x = longitude, y = latitude, color = New_cases, size = New_cases), alpha = 0.7) +  # Punti per i casi COVID-19 con colore e dimensione basati su New_cases
scale_color_gradient(low = "yellow", high = "red", name = "New Cases", labels = scales::comma) +  # Scala colori dal giallo al rosso con numeri normali
scale_size_continuous(range = c(1, 10), guide = "none") +  # Regola le dimensioni dei punti e rimuovi la legenda
scale_y_continuous(labels = comma) +  # Asse Y senza notazione esponenziale
labs(title = "New COVID-19 Cases by Location",
x = "Longitude", y = "Latitude") +  # Etichette degli assi
theme_minimal() +  # Tema pulito e minimale
theme(plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
p2
p3 <- ggplot(cases_1, aes(x = Date_month, y = Continent, fill = New_cases)) +
geom_tile() +
labs(title = "Heatmap of New COVID-19 Cases by Continent and Month", x = "Month", y = "Continent")
p3
p3 <- ggplot(cases_1, aes(x = as.factor(Date_month), y = Continent, fill = New_cases)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red", na.value = "white", name = "New Cases") +  # Scala di colori dal giallo al rosso
labs(title = "Heatmap of New COVID-19 Cases by Continent and Month",
x = "Month", y = "Continent") +  # Etichette degli assi
theme_minimal() +  # Tema moderno e pulito
theme(plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1))  # Ruota le etichette dei mes
# Chart 3
p3 <- ggplot(cases_1, aes(x = as.factor(Date_month), y = Continent, fill = New_cases)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red", na.value = "white", name = "New Cases") +  # Scala di colori dal giallo al rosso
labs(title = "Heatmap of New COVID-19 Cases by Continent and Month",
x = "Month", y = "Continent") +  # Etichette degli assi
theme_minimal() +  # Tema moderno e pulito
theme(plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1))  # Ruota le etichette dei mes
p3
summary(cases_1$New_cases)
summary(cases)    # Summary statistics
# There are negative values in New_cases and New_Death
cases <- cases %>% filter(New_cases >=0 & New_deaths >= 0)
